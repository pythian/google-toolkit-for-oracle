# Copyright 2020 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
- name: check-swlib | Validate base software release
  shell: |
    set -o pipefail
    if gsutil -q stat gs://"{{ swlib_mount_src }}"/"{{ item.1.name }}"; then
      f_name="{{ item.1.name }}"
      expected_md5="{{ item.1.md5sum }}"
    else
      f_name="{{ item.1.alt_name | default('x') }}"
      expected_md5="{{ item.1.alt_md5sum | default('x') }}"
    fi
    actual_md5=$(gsutil ls -L gs://"{{ swlib_mount_src }}"/"${f_name}" | awk '/md5/ { print $3 }')
    if [[ "$?" -ne "0" ]] ; then
      echo "ERROR locating {{ item.1.name }}{% if item.1.alt_name is defined and item.1.alt_name | length > 0 %} or {{ item.1.alt_name }}{% endif %}"
    else
      if [[ "$actual_md5" != "$expected_md5" ]]; then
        echo "ERROR in {{ item.0.name }} md5: expected $expected_md5, but got $actual_md5 for ${f_name}"
      fi
    fi
  args:
    executable: /bin/bash
  failed_when: "'ERROR' in base_repo_files.stdout"
  changed_when: false
  ignore_errors: true
  loop: "{{ (gi_software + gi_interim_patches + rdbms_software) | subelements('files') }}"
  when: item.0.version == oracle_ver
  register: base_repo_files

- name: check-swlib | Validate patchsets
  shell: |
    set -o pipefail
    gsutil ls -L gs://{{ swlib_mount_src }}/{{ item.patchfile }} | \
      awk '/md5/ { print $3 }'
  args:
    executable: /bin/bash
  failed_when: item.md5sum != patch_repo_files.stdout
  changed_when: false
  ignore_errors: true
  with_items:
    - "{{ gi_patches }}"
    - "{{ rdbms_patches }}"
  when:
    - item.base == oracle_ver
    - item.release == oracle_rel
  register: patch_repo_files

# We can't reliably check hashes for opatch, as the same file name
# can have different values based on version.
- name: check-swlib | Validate opatch patches
  shell: |
    set -o pipefail
    gsutil ls -L gs://{{ swlib_mount_src }}/{{ item.patchfile }} | \
      awk '/Content-Length/ { print $2 }'
  args:
    executable: /bin/bash
  failed_when: opatch_repo_files.stdout <= "0"
  changed_when: false
  ignore_errors: true
  with_items:
    - "{{ opatch_patches }}"
  when:
    - item.release == oracle_ver
    - oracle_rel != "base"
  register: opatch_repo_files

- name: check-swlib | Report gsutil failures (base)
  fail:
    msg: "ERROR locating {{ item.item.0.name }} {{ item.item.1.name }}: {{ item.stdout }}"
  when: item.failed_when_result is defined and item.failed_when_result == true
  with_items:
    - "{{ base_repo_files.results }}"

- name: check-swlib | Report gsutil failures (patch)
  fail:
    msg: "ERROR locating {{ item.item.category }} patch {{ item.item.patchfile }}: {{ item.stderr_lines }}"
  when: item.rc is defined and item.rc != 0
  with_items:
    - "{{ patch_repo_files.results }}"
    - "{{ opatch_repo_files.results }}"

- name: check-swlib | Report MD5 mismatches (patch)
  fail:
    msg: |
      MD5 mismatch: expected {{ item.item.md5sum }} got {{ item.stdout_lines }}
      for {{ item.item.category }} patch {{ item.item.patchfile }}
  when: item.failed is defined and item.failed
  with_items:
    - "{{ patch_repo_files.results }}"
    - "{{ opatch_repo_files.results }}"
