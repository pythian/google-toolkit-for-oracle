# Copyright 2020 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
- name: gi-install | Set facts
  set_fact:
    install_unzip_path: "{{ grid_home }}"
    installer_command: "{{ grid_home }}/gridSetup.sh {{ prereq_option }}"
    cluvfy_command: "{{ grid_home }}/runcluvfy.sh stage -pre hacfg -verbose"
  tags: gi-setup

- name: gi-install | 11.2 and 12.1 specific installer adjustments
  set_fact:
    install_unzip_path: "{{ swlib_unzip_path }}"
    installer_command: "{{ swlib_unzip_path }}/grid/runInstaller {{ prereq_option }} -waitforcompletion"
    cluvfy_command: "{{ swlib_unzip_path }}/grid/runcluvfy.sh stage -pre hacfg -verbose"
  when: oracle_ver in ['11.2.0.4.0','12.1.0.2.0']
  tags: gi-setup

- name: gi-install | Installer confirmations
  debug:
    msg:
      - "Installing from file : {{ osw.files }}"
      - "Unzipping into dir   : {{ install_unzip_path }}"
      - "Using cluvfy cmd     : {{ cluvfy_command }}"
  tags: gi-setup

- name: gi-install | Unzip GI patch
  unarchive:
    src: "{{ swlib_path }}/{{ item.patchfile }}"
    dest: "{{ swlib_unzip_path }}"
    remote_src: true
    creates: .gi_patch_{{ oracle_rel }}
    owner: "{{ grid_user }}"
    group: "{{ oracle_group }}"
  with_items:
    - "{{ gi_patches }}"
  when: item.release == oracle_rel and item.category == 'RU' and item.category != "HAS_interim_patch"
  become: true
  tags: gi-setup,sw-unzip

- name: gi-install | Set variable for release patch
  set_fact:
    rel_patch: "-apply{% if oracle_ver_base == '12.2' %}PSU{% else %}RU{% endif %} {{ swlib_unzip_path }}/{{ item.patchnum }}{{ item.patch_subdir }}"
  with_items:
    - "{{ gi_patches }}"
  when: item.release == oracle_rel and item.category == 'RU'
  tags: gi-setup,rel-patch

- name: gi-install | Unzipping GI software
  become: true
  become_user: "{{ grid_user }}"
  unarchive:
    src: "{{ swlib_path }}/{{ item.name }}"
    dest: "{{ install_unzip_path }}"
    remote_src: true
  with_items:
    - "{{ osw.files }}"
  tags: gi-setup,sw-unzip

- name: gi-install | Find the cvuqdisk RPM
  become: true
  become_user: root
  find:
    paths: "{{ grid_home }}/cv/rpm/"
    patterns: "*.rpm"
  register: r
  tags: gi-setup,cvuqdisk

- name: gi-install | Install the cvuqdisk RPM
  become: true
  become_user: root
  package:
    name: "{{ r.files | map(attribute='path') | list }}"
    state: present
    lock_timeout: "{{ pkg_mgr_lock_timeout }}"
    disable_gpg_check: true
  register: cvuqdisk_res
  environment:
    CVUQDISK_GRP: "oinstall"
  tags: gi-setup,cvuqdisk

- name: gi-install | Run cluvfy utility
  become: true
  become_user: "{{ grid_user }}"
  command: "{{ cluvfy_command }}"
  when: run_cluvfy|bool
  register: cluvfy_res
  failed_when: cluvfy_res.rc != 0 and oracle_ver != '11.2.0.4.0'  # Exclude 11gR2 due to elfutils & pdksh bug, MOS Doc ID 1962046.1
  ignore_errors: true
  no_log: true
  tags: gi-setup,cluvfy

- name: gi-install | cluvfy results
  debug:
    msg:
      - "{{ cluvfy_res.stdout_lines }}"
  when: run_cluvfy|bool and cluvfy_res.rc != 0
  tags: gi-setup,cluvfy

- name: gi-install | Create GI response file script
  become: true
  become_user: "{{ grid_user }}"
  template:
    src: grid_install.rsp.sh.j2
    dest: "{{ swlib_unzip_path }}/grid_install.rsp.sh"
  tags: gi-setup

- name: gi-install | Run GI response file script
  become: true
  become_user: "{{ grid_user }}"
  command: "sh {{ swlib_unzip_path }}/grid_install.rsp.sh"
  tags: gi-setup

- name: gi-install | Script cleanup
  become: true
  become_user: "{{ grid_user }}"
  file:
    path: "{{ swlib_unzip_path }}/grid_install.rsp.sh"
    state: absent
  tags: gi-setup

- name: gi-install | Set mgmtdb option
  set_fact:
    mgmt_option: "{% if oracle_ver_base in ('12.1') %}-J-Doracle.install.mgmtDB=false{% else %}-J-Doracle.install.mgmtDB=false -J-Doracle.install.mgmtDB.CDB=false -J-Doracle.install.crs.enableRemoteGIMR=false{% endif %}"
  tags: gi-setup

- name: gi-install | Set installer command
  set_fact:
    installer_command: "{{ installer_command }} -silent -responseFile {{ swlib_unzip_path }}/grid_install.rsp {{ rel_patch | default('') }} {{ mgmt_option | default('') }}"
  tags: gi-setup

- name: gi-install | Update GI OPatch
  unarchive:
    src: "{{ swlib_path }}/{{ item.patchfile }}"
    dest: "{{ grid_home }}"
    remote_src: true
  with_items:
    - "{{ opatch_patches }}"
  when:
    - item.release == oracle_ver
    - item.category == "OPatch"
    - oracle_rel != "base"
  become: true
  become_user: "{{ grid_user }}"
  tags: gi-setup,opatch

- name: gi-install | Information
  debug:
    msg: "Using installer cmd: {{ installer_command }}"
  tags: gi-setup

- name: gi-install | Set CV_ASSUME_DISTID to OEL7 when installing on RHEL8  # MOS Note: 2878100.1
  set_fact:
    cv_distid: "{{ 'OEL7' if ansible_os_family == 'RedHat' and (ansible_distribution_major_version | int) >= 8 and (oracle_ver_base | float) <= 19.3 else '' }}"
  tags: gi-setup

- name: gi-install | Run installer
  become: true
  become_user: "{{ grid_user }}"
  command: "{{ installer_command }}"
  environment:
    CV_ASSUME_DISTID: "{{ cv_distid }}"
  register: install_grid_software
  failed_when: >
    ('Successfully Setup Software' not in install_grid_software.stdout) or
    (install_grid_software.rc not in [0,6,250])
  tags: gi-setup

- name: gi-install | Installer output
  debug:
    msg:
      - "{{ install_grid_software.cmd }}"
      - "{{ install_grid_software.stdout_lines }}"
      # verbosity: 1
  tags: gi-setup

- name: gi-install | Create OCM response file (if neccessary)
  become: true
  become_user: "{{ grid_user }}"
  script: expect_rsp.sh {{ oracle_base }} {{ grid_home }} {{ swlib_unzip_path }}
  with_items:
    - "{{ gi_interim_patches }}"
  when: item.version == osw.version and item.category == "HAS_interim_patch"
  tags: gi-setup,patch

- name: gi-install | 12.2 bug resolution - MOS (Doc ID 2401455.1)
  become: true
  become_user: root
  copy:
    src: "{{ oracle_root }}/oraInventory/oraInst.loc"
    dest: "{{ grid_home }}/oraInst.loc"
    remote_src: true
    owner: "{{ grid_user }}"
    group: "{{ oracle_group }}"
    mode: u=rw,g=r,o=
  when: oracle_ver == '12.2.0.1.0'

- name: gi-install | Create patch directories
  become: true
  become_user: "{{ grid_user }}"
  file:
    path: "{{ swlib_unzip_path }}/{{ item.files.0.name | replace('.zip','') }}"
    state: directory
    owner: "{{ grid_user }}"
    group: "{{ oracle_group }}"
    mode: ug=rwx,o=
  with_items:
    - "{{ gi_interim_patches }}"
  when: item.version == osw.version and item.category == "HAS_interim_patch"
  tags: gi-setup,patch

- name: gi-install | Unzip other pre-HAS critical interim patches
  become: true
  become_user: "{{ grid_user }}"
  unarchive:
    src: "{{ swlib_path }}/{{ item.files.0.name }}"
    dest: "{{ swlib_unzip_path }}/{{ item.files.0.name | replace('.zip','') }}"
    remote_src: true
  with_items:
    - "{{ gi_interim_patches }}"
  when: item.version == osw.version and item.category == "HAS_interim_patch"
  tags: gi-setup,patch

- name: gi-install | Install pre-HAS critical interim patches
  become: true
  become_user: "{{ grid_user }}"
  shell: |
    export PATH={{ grid_home }}/OPatch:${PATH}
    if [ "{{ item.patchutil }}" = "opatch" ]; then
       if [ -f "{{ swlib_unzip_path }}/ocm.rsp" ]; then
          opatch napply -silent -oh {{ grid_home }} {{ swlib_unzip_path }}/{{ item.files.0.name | replace('.zip','') }}/{{ item.patchnum }} \
            -ocmrf {{ swlib_unzip_path }}/ocm.rsp
       else
          opatch napply -silent -oh {{ grid_home }} {{ swlib_unzip_path }}/{{ item.files.0.name | replace('.zip','') }}/{{ item.patchnum }} -silent
       fi
    elif [ "{{ item.patchutil }}" = "gridsetup" ]; then
       {{ grid_home }}/gridSetup.sh -silent -applyOneOffs {{ swlib_unzip_path }}/{{ item.files.0.name | replace('.zip','') }}/{{ item.patchnum }} -responseFile {{ swlib_unzip_path }}/grid_install.rsp
    fi
  with_items:
    - "{{ gi_interim_patches }}"
  when: item.version == osw.version and item.category == "HAS_interim_patch"
  register: patch_output
  failed_when: "('OPatch succeeded' not in patch_output.stdout) and ('Successfully applied the patch' not in patch_output.stdout)"
  tags: gi-setup,patch

- name: gi-install | OPatch output
  debug:
    msg:
      - "{{ patch_output }}"
    verbosity: 1
  with_items:
    - "{{ gi_interim_patches }}"
  when: item.version == osw.version and item.category == "HAS_interim_patch"
  tags: gi-setup,patch

- name: gi-install | OCM response file cleanup
  become: true
  become_user: "{{ grid_user }}"
  file:
    path: "{{ swlib_unzip_path }}/ocm.rsp"
    state: absent
  with_items:
    - "{{ gi_interim_patches }}"
  when: item.version == osw.version and item.category == "HAS_interim_patch"
  tags: gi-setup,patch

- name: gi-install | Run script orainstRoot.sh
  become: true
  become_user: root
  command: "{{ oracle_root }}/oraInventory/orainstRoot.sh"
  ignore_errors: true
  when: "'skipped' not in install_grid_software.stdout"
  tags: gi-setup,root-scripts

- name: gi-install | Run script root.sh
  become: true
  become_user: root
  command: "{{ grid_home }}/root.sh"
  when: "'skipped' not in install_grid_software.stdout"
  tags: gi-setup,root-scripts

- name: gi-install | Complete plugin configuration
  become: true
  become_user: "{{ grid_user }}"
  command: "{{ grid_home }}/gridSetup.sh -executeConfigTools -silent -responseFile {{ swlib_unzip_path }}/grid_install.rsp"
  register: install_grid_plugins
  when: oracle_ver not in ['11.2.0.4.0','12.1.0.2.0']
  failed_when: "(   ('Successfully Setup Software' not in install_grid_plugins.stdout) or
                    (install_grid_plugins.rc not in [0,6,250]) )
               and
               ('The Installer has detected that there are no config tools to execute for the specified Oracle home' not in install_grid_plugins.stdout)"
  tags: gi-setup
